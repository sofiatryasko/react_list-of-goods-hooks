{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","ALPHABET","sortType","setSortType","visibleGoods","goods","sort","a","b","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","prev","NONE","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAkB,GAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAmBH,EAASM,UAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAzBD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENK,EAAY,YAAOC,GAUzB,OARAD,EAAaE,MAAK,SAACC,EAAGC,GACpB,OAAQN,GACN,KAAKP,EAASM,SAAU,OAAOM,EAAEE,cAAcD,GAC/C,KAAKb,EAASe,OAAQ,OAAOH,EAAEI,OAASH,EAAEG,OAC1C,QAAS,OAAO,MAIhBZ,EACKK,EAAaQ,UAGfR,EAOcS,CACnBjB,EACA,CAAEM,WAAUH,eAGd,OACE,mCACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yDAGLZ,IAAaP,EAASM,SAAW,WAAa,IAElDe,QAAS,kBAAMb,EAAYR,EAASM,WAPtC,iCAYA,wBACEc,KAAK,SACLD,UAAS,4DAGLZ,IAAaP,EAASe,OAAS,WAAa,IAEhDM,QAAS,kBAAMb,EAAYR,EAASe,SAPtC,4BAYA,wBACEK,KAAK,SACLD,UAAS,4DAGJf,EAA0B,GAAb,YAElBiB,QAAS,kBAAMhB,GAAc,SAAAiB,GAAI,OAAKA,MAPxC,sBAYEf,IAAaP,EAASuB,MAAQnB,IAC9B,wBACEgB,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPb,EAAYR,EAASuB,MACrBlB,GAAc,IALlB,sBAaJ,6BACE,6BACGI,EAAae,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,gBChHtCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.68f06c92.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET: return a.localeCompare(b);\n      case SortType.LENGTH: return a.length - b.length;\n      default: return 0;\n    }\n  });\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n  const [sortType, setSortType] = useState<SortType>(SortType.ALPHABET);\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <>\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={\n              `button \n              is-info \n              ${sortType !== SortType.ALPHABET ? 'is-light' : ''}`\n            }\n            onClick={() => setSortType(SortType.ALPHABET)}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              `button \n              is-success \n              ${sortType !== SortType.LENGTH ? 'is-light' : ''}`\n            }\n            onClick={() => setSortType(SortType.LENGTH)}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              `button \n              is-warning \n              ${!isReversed ? 'is-light' : ''}`\n            }\n            onClick={() => setIsReversed(prev => !prev)}\n          >\n            Reverse\n          </button>\n\n          {(sortType !== SortType.NONE || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                setSortType(SortType.NONE);\n                setIsReversed(false);\n              }}\n            >\n              Reset\n            </button>\n          )}\n\n        </div>\n        <ul>\n          <ul>\n            {visibleGoods.map((good) => (\n              <li data-cy=\"Good\" key={good}>\n                {good}\n              </li>\n            ))}\n          </ul>\n        </ul>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}